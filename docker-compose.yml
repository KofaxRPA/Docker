#
# Example of a basic docker-compose file.
# It brings up a PostgreSQL instance, a Management Console and a RoboServer.
# The RoboServer count can be scaled.
#
version: '3.8'
networks:
  net:

services:
  postgres-service:
    image: postgres:10
    environment:
      - POSTGRES_USER=scheduler
      - POSTGRES_PASSWORD=schedulerpassword
      - POSTGRES_DB=scheduler
    networks:
      - net
  managementconsole-service:
    build:
      context: .
      dockerfile: docker/managementconsole/Dockerfile
    image: 022336740566.dkr.ecr.eu-central-1.amazonaws.com/managementconsole:11.2.0.2
    depends_on:
      - postgres-service
    ports:
      - 8080:8080
    environment:
      - CONTEXT_RESOURCE_VALIDATIONQUERY=SELECT 1
      - CONTEXT_RESOURCE_USERNAME=scheduler
      - CONTEXT_RESOURCE_PASSWORD=schedulerpassword
      - CONTEXT_RESOURCE_DRIVERCLASSNAME=org.postgresql.Driver
      - CONTEXT_RESOURCE_URL=jdbc:postgresql://postgres-service:5432/scheduler
      # enter your license here, or type it through the GUI in first login
      - CONFIG_LICENSE_NAME=
      - CONFIG_LICENSE_EMAIL=
      - CONFIG_LICENSE_COMPANY=
      - CONFIG_LICENSE_PRODUCTIONKEY=
      - CONFIG_LICENSE_NONPRODUCTIONKEY=
      # Use Postgres as the log database
      - SETTINGS_ENTRY_COUNT=7
      - SETTINGS_ENTRY_KEY_1=USE_LOGDB
      - SETTINGS_ENTRY_VALUE_1=true
      - SETTINGS_ENTRY_KEY_2=LOGDB_SCHEMA
      - SETTINGS_ENTRY_VALUE_2=scheduler
      - SETTINGS_ENTRY_KEY_3=LOGDB_HOST
      - SETTINGS_ENTRY_VALUE_3=postgres-service:5432
      - SETTINGS_ENTRY_KEY_4=LOGDB_TYPE
      - SETTINGS_ENTRY_VALUE_4=PostgreSQL
      - SETTINGS_ENTRY_KEY_5=LOGDB_USERNAME
      # if you want to log to a separate database than MC's database 'scheduler' you'll need a second container.
      - SETTINGS_ENTRY_VALUE_5=scheduler
      - SETTINGS_ENTRY_KEY_6=LOGDB_PASSWORD
      - SETTINGS_ENTRY_VALUE_6=schedulerpassword
      # base url - this is how a user would find the Management Console
      - SETTINGS_ENTRY_KEY_7=BASE_URL
      - SETTINGS_ENTRY_VALUE_7=http://PF1XACSPdavid:8080
    networks:
      - net
#AWS Container resources
# https://docs.docker.com/cloud/ecs-compose-features/#container-resources
# https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html

  #   deploy:
  #     resources:
  #       limits:
  #         cpu: 0.25
  #         memory: 2Gb
  # roboserver-service:
    build:
      context: .
      dockerfile: docker/roboserver/Dockerfile
    image: 022336740566.dkr.ecr.eu-central-1.amazonaws.com/roboserver:11.2.0.2
    depends_on:
      - managementconsole-service
      - postgres-service
    networks:
      - net
    environment:
      - ROBOSERVER_ENABLE_MC_REGISTRATION=true
      - ROBOSERVER_MC_URL=http://managementconsole-service:8080/
      - ROBOSERVER_MC_CLUSTER=Non Production
      - ROBOSERVER_MC_USERNAME=admin
      - ROBOSERVER_MC_PASSWORD=admin
      - ROBOSERVER_ENABLE_SOCKET_SERVICE=true
      - ROBOSERVER_SERVER_NAME=roboserver
      - WRAPPER_MAX_MEMORY=2048
    # deploy:
    #   resources:
    #     limits:
    #       cpu: 0.25
    #       memory: 2Gb

# This is to add https to the load balancer on AWS
# https://docs.docker.com/cloud/ecs-integration/#setting-ssl-termination-by-load-balancer
#x-aws-cloudformation:
#  Resources:
#    WebappTCP80Listener:
#      Properties:
#        Certificates:
#          - CertificateArn: "arn:aws:acm:certificate/123abc"
#        Protocol: HTTPS
